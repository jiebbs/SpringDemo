<?xml version="1.0" encoding="utf-8"?>
<!--
根节点<configuration>包含的属性
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 second" debug="false">
    <!--
     属性一：设置上下文名称<contextName>
     每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，
     用于区分不同应用程序的记录。一旦设置，不能修改,可以通过%contextName来打印日志上下文名称。
     -->
    <contextName>logback-spring-demo-dev</contextName>

    <!--
     属性二：设置变量<property> 用来定义变量值的标签，有两个属性，name和value；
     其中name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。
     定义变量后，可以使“${}”来使用变量。
     -->
    <property name="pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg %n"/>
    <property name="pattern-color" value="%yellow(%d{yyyy-MM-dd HH:mm:ss.SSS}) [%thread] %highlight(%-5level) %green(%logger{50}) - %highlight(%msg) %n"/>
    <property name="LOG_HOME" value="logback-demo/logs"/>

    <!--
     子节点一<appender>
     appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，
     常用就是控制台输出策略和文件输出策略。
     控制台输出ConsoleAppender：
     -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--
        ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。
        如果不用记得注释掉，不然你控制台会发现没日志~
        -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <!--
         <encoder>表示对日志进行编码：
        %d{HH: mm:ss.SSS}——日志输出时间。
        %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用。
        %-5level——日志级别，并且使用5个字符靠左对齐。
        %logger{36}——日志输出者的名字。
        %msg——日志消息。
        %n——平台的换行符。
         -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <!-- 控制台输出-带颜色 -->
    <appender name="CONSOLE-WITH-COLOR" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern-color}</pattern>
        </encoder>
    </appender>

    <!--
     输出到文件RollingFileAppender：
     另一种常见的日志输出到文件，随着应用的运行时间越来越长，日志也会增长的越来越多，
     将他们输出到同一个文件并非一个好办法。RollingFileAppender用于切分文件日志：
     -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
             <fileNamePattern>${log.path}/logback.%d{yyyy-MM-dd}.log
             </fileNamePattern>定义了日志的切分方式——把每一天的日志归档到一个文件中
             -->
            <fileNamePattern>${LOG_HOME}/all.%d.%i.log</fileNamePattern>
            <!--日志文件最大的大小-->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--
            <maxHistory>30</maxHistory>表示只保留最近30天的日志，以防止日志填满整个磁盘空间。
            同理，可以使用%d{yyyy-MM-dd_HH-mm}来定义精确到分的日志切分方式；
            -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>

        <encoder>
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <!--
     root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性，用来设置打印级别，
     大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。
     -->
    <root level="INFO">
        <appender-ref ref="CONSOLE-WITH-COLOR"/>
        <appender-ref ref="FILE"/>
    </root>

</configuration>